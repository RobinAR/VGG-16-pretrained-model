# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1caB9aUDVCSUGdQ8SVvWbIufBp_ERg_eP
"""

from tensorflow.keras.applications.vgg16 import VGG16
model = VGG16 ()

print(model.summary())

from tensorflow.keras.utils import plot_model
plot_model(model, show_layer_names=True, show_shapes=True)

# Upload a picture
from google.colab import files
uploaded = files.upload()

from tensorflow.keras.preprocessing.image import load_img
image = load_img('dog.jpg', target_size=(224,224)) #vgg solo acepta 224x224

import matplotlib.pyplot as plt
plt.imshow(image)

from tensorflow.keras.preprocessing.image import img_to_array
#convertir los pixeles de la imagen en un arreglo a numpy
image = img_to_array(image)

#remodelar la data del modelo
image = image.reshape((1, image.shape [0], image.shape[1], image.shape[2]))

from tensorflow.keras.applications.vgg16 import preprocess_input
# preparar la imagen para el modelo vgg
image = preprocess_input(image)

# predecir la probabilidad sobre todas las clases de salida
yhat = model.predict(image)

print(yhat.shape)

import numpy as np
np.set_printoptions(formatter = {'float':'{: 0.3f}'.format})
print(yhat)

from tensorflow.keras.applications.vgg16 import decode_predictions

#convertir las probabilidades en marcas de clase
label = decode_predictions(yhat)
# recuperar el resultado más parecido, igual a la probabilidad más grande
label = label [0][0]
# imprimir  la clasificación
print (' %s (%.2f%%)'%(label[1], label[2]*100))